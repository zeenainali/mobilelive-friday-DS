import { ProjectGraph } from '../core/project-graph';
import { NxJson } from '../core/shared-interfaces';
import { Task } from './tasks-runner';
export interface Hash {
    value: string;
    details: {
        command: string;
        sources: {
            [projectName: string]: string;
        };
        implicitDeps: {
            [key: string]: string;
        };
        runtime: {
            [input: string]: string;
        };
    };
}
interface ProjectHashResult {
    value: string;
    sources: {
        [projectName: string]: string;
    };
}
interface ImplicitHashResult {
    value: string;
    sources: {
        [fileName: string]: string;
    };
}
interface RuntimeHashResult {
    value: string;
    runtime: {
        [input: string]: string;
    };
}
interface NodeModulesResult {
    value: string;
}
export declare class Hasher {
    private readonly projectGraph;
    private readonly nxJson;
    private readonly options;
    static version: string;
    implicitDependencies: Promise<ImplicitHashResult>;
    nodeModules: Promise<NodeModulesResult>;
    runtimeInputs: Promise<RuntimeHashResult>;
    fileHashes: FileHashes;
    projectHashes: ProjectHashes;
    constructor(projectGraph: ProjectGraph, nxJson: NxJson, options: any);
    hash(task: Task): Promise<Hash>;
    private runtimeInputsHash;
    private implicitDepsHash;
    private nodeModulesHash;
}
export declare class ProjectHashes {
    private readonly projectGraph;
    private readonly fileHashes;
    private sourceHashes;
    constructor(projectGraph: ProjectGraph, fileHashes: FileHashes);
    hashProject(projectName: string, visited: string[]): Promise<ProjectHashResult>;
    private hashProjectNodeSource;
}
export declare function extractNameAndVersion(content: string): string;
export declare class FileHashes {
    private queue;
    private numberOfConcurrentReads;
    private fileHashes;
    private resolvers;
    hashFile(path: string, transformer?: (x: string) => string | null): Promise<string>;
    private pushFileIntoQueue;
    private takeFromQueue;
    private processPath;
}
export {};
