"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const output_1 = require("../utils/output");
const project_graph_1 = require("../core/project-graph");
const file_utils_1 = require("../core/file-utils");
function printArgsWarning(options) {
    const { files, uncommitted, untracked, base, head, all } = options;
    if (!files && !uncommitted && !untracked && !base && !head && !all) {
        output_1.output.note({
            title: `Affected criteria defaulted to --base=${output_1.output.bold('master')} --head=${output_1.output.bold('HEAD')}`,
        });
    }
    if (all) {
        output_1.output.warn({
            title: `Running affected:* commands with --all can result in very slow builds.`,
            bodyLines: [
                output_1.output.bold('--all') +
                    ' is not meant to be used for any sizable project or to be used in CI.',
                '',
                output_1.output.colors.gray('Learn more about checking only what is affected: ') + 'https://nx.dev/guides/monorepo-affected.',
            ],
        });
    }
}
exports.printArgsWarning = printArgsWarning;
function parseFiles(options) {
    const { files, uncommitted, untracked, base, head } = options;
    if (files) {
        return {
            files,
        };
    }
    else if (uncommitted) {
        return {
            files: getUncommittedFiles(),
        };
    }
    else if (untracked) {
        return {
            files: getUntrackedFiles(),
        };
    }
    else if (base && head) {
        return {
            files: getFilesUsingBaseAndHead(base, head),
        };
    }
    else if (base) {
        return {
            files: Array.from(new Set([
                ...getFilesUsingBaseAndHead(base, 'HEAD'),
                ...getUncommittedFiles(),
                ...getUntrackedFiles(),
            ])),
        };
    }
}
exports.parseFiles = parseFiles;
function getUncommittedFiles() {
    return parseGitOutput(`git diff --name-only --relative HEAD .`);
}
function getUntrackedFiles() {
    return parseGitOutput(`git ls-files --others --exclude-standard`);
}
function getFilesUsingBaseAndHead(base, head) {
    const mergeBase = child_process_1.execSync(`git merge-base ${base} ${head}`, {
        maxBuffer: file_utils_1.TEN_MEGABYTES,
    })
        .toString()
        .trim();
    return parseGitOutput(`git diff --name-only --relative ${mergeBase} ${head}`);
}
function parseGitOutput(command) {
    return child_process_1.execSync(command, { maxBuffer: file_utils_1.TEN_MEGABYTES })
        .toString('utf-8')
        .split('\n')
        .map((a) => a.trim())
        .filter((a) => a.length > 0);
}
// TODO: remove it in Nx 10
function getProjectNodes(workspaceJson, nxJson) {
    const graph = project_graph_1.createProjectGraph(workspaceJson, nxJson);
    return Object.values(graph.nodes);
}
exports.getProjectNodes = getProjectNodes;
function getProjectRoots(projectNames) {
    const { projects } = file_utils_1.readWorkspaceJson();
    return projectNames.map((name) => projects[name].root);
}
exports.getProjectRoots = getProjectRoots;
//# sourceMappingURL=shared.js.map