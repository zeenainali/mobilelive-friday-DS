import {
  createAsyncThunk,
  createEntityAdapter,
  createSlice,
  EntityState,
  PayloadAction
} from '@reduxjs/toolkit';

export const <%= constantName %>_FEATURE_KEY = '<%= propertyName %>';

/*
 * Update these interfaces according to your requirements.
 */
export interface <%= className %>Entity {
  id: number;
}

export interface <%= className %>State extends EntityState<<%= className %>Entity> {
  loadingStatus: 'not loaded' | 'loading' | 'loaded' | 'error';
  error: string;
}

export const <%= propertyName %>Adapter = createEntityAdapter<<%= className %>Entity>();

/**
 * Export an effect using createAsyncThunk from
 * the Redux Toolkit: https://redux-toolkit.js.org/api/createAsyncThunk
 */
export const fetch<%= className %>s = createAsyncThunk(
  '<%= propertyName %>/fetchStatus',
  async (_, thunkAPI) => {
    /**
     * Replace this with your custom fetch call.
     * For example, `return myApi.get<%= className %>s()`;
     * Right now we just return an empty array.
     */
    return Promise.resolve([]);
  }
);

export const initial<%= className %>State: <%= className %>State = <%= propertyName %>Adapter.getInitialState({
  loadingStatus: 'not loaded',
  error: null
});

export const <%= propertyName %>Slice = createSlice({
  name: <%= constantName %>_FEATURE_KEY,
  initialState: initial<%= className %>State,
  reducers: {
    add<%= className %>: <%= propertyName %>Adapter.addOne,
    remove<%= className %>: <%= propertyName %>Adapter.removeOne
    // ...
  },
  extraReducers: builder => {
    builder.addCase(fetch<%= className %>s.pending, (state: <%= className %>State) => {
      state.loadingStatus = 'loading';
    });
    builder.addCase(fetch<%= className %>s.fulfilled, (state: <%= className %>State, action: PayloadAction<<%= className %>Entity[]>) => {
      <%= propertyName %>Adapter.addMany(state, action.payload);
      state.loadingStatus = 'loaded';
    });
    builder.addCase(fetch<%= className %>s.rejected, (state: <%= className %>State, action) => {
      state.loadingStatus = 'error';
      state.error = action.error.message;
    });
  }
});

/*
 * Export reducer for store configuration.
 */
export const <%= propertyName %>Reducer = <%= propertyName %>Slice.reducer;

/*
 * Export action creators to be dispatched. For use with the `useDispatch` hook.
 *
 * e.g.
 * ```
 * const dispatch = useDispatch();
 * dispatch(<%= propertyName %>Actions.add<%= className %>([{ id: 1 }]));
 * ```
 *
 * See: https://react-redux.js.org/next/api/hooks#usedispatch
 */
export const <%= propertyName %>Actions = {
  ...<%= propertyName %>Slice.actions,
  fetch<%= className %>s
};

/*
 * Export selectors to query state. For use with the `useSelector` hook.
 *
 * e.g.
 * ```
 * const entities = useSelector(select<%= className %>Entities);
 * ```
 *
 * See: https://react-redux.js.org/next/api/hooks#useselector
 */
export const <%= propertyName %>Selectors = {
  get<%= className %>State: (rootState: unknown): <%= className %>State => rootState[<%= constantName %>_FEATURE_KEY],
  ...<%= propertyName %>Adapter.getSelectors()
};