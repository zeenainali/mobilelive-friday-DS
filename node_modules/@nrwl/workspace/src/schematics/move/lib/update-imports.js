"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const workspace_1 = require("@nrwl/workspace");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const utils_1 = require("./utils");
/**
 * Updates all the imports in the workspace and modifies the tsconfig appropriately.
 *
 * @param schema The options provided to the schematic
 */
function updateImports(schema) {
    return (tree, _context) => {
        return rxjs_1.from(workspace_1.getWorkspace(tree)).pipe(operators_1.map((workspace) => {
            const nxJson = workspace_1.readJsonInTree(tree, 'nx.json');
            const project = workspace.projects.get(schema.projectName);
            if (project.extensions['projectType'] === 'application') {
                // These shouldn't be imported anywhere?
                return tree;
            }
            const projectRef = {
                from: utils_1.normalizeSlashes(`@${nxJson.npmScope}/${project.root.substr(5)}`),
                to: utils_1.normalizeSlashes(`@${nxJson.npmScope}/${schema.destination}`),
            };
            const replaceProjectRef = new RegExp(projectRef.from, 'g');
            for (const [name, definition] of workspace.projects.entries()) {
                if (name === schema.projectName) {
                    continue;
                }
                const projectDir = tree.getDir(definition.root);
                projectDir.visit((file) => {
                    const contents = tree.read(file).toString('utf-8');
                    if (!replaceProjectRef.test(contents)) {
                        return;
                    }
                    const updatedFile = tree
                        .read(file)
                        .toString()
                        .replace(replaceProjectRef, projectRef.to);
                    tree.overwrite(file, updatedFile);
                });
            }
            const projectRoot = {
                from: project.root.substr(5),
                to: schema.destination,
            };
            const tsConfigPath = 'tsconfig.json';
            if (tree.exists(tsConfigPath)) {
                let contents = JSON.parse(tree.read(tsConfigPath).toString('utf-8'));
                const path = contents.compilerOptions.paths[projectRef.from];
                contents.compilerOptions.paths[projectRef.to] = path.map((x) => x.replace(new RegExp(projectRoot.from, 'g'), projectRoot.to));
                delete contents.compilerOptions.paths[projectRef.from];
                tree.overwrite(tsConfigPath, workspace_1.serializeJson(contents));
            }
            return tree;
        }));
    };
}
exports.updateImports = updateImports;
//# sourceMappingURL=update-imports.js.map