"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var components_1 = require("@storybook/components");
var React = __importStar(require("react"));
var shared_1 = require("./shared");
var LocaleSelector = /** @class */ (function (_super) {
    __extends(LocaleSelector, _super);
    function LocaleSelector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            locales: [],
            expanded: false
        };
        _this.renderLocaleSelector = function () {
            var _a = _this.state, locales = _a.locales, activeLocale = _a.activeLocale, expanded = _a.expanded;
            var defaultLocale = _this.getDefaultLocale(locales);
            var links = _this.getLinks(locales);
            if (!activeLocale) {
                return false;
            }
            return (React.createElement(components_1.WithTooltip, { placement: "top", trigger: "click", tooltipShown: expanded, onVisibilityChange: _this.handleVisibilityChange, tooltip: React.createElement(components_1.TooltipLinkList, { links: links }), closeOnClick: true },
                React.createElement(components_1.IconButton, { key: "background", active: activeLocale !== defaultLocale, title: "Change the locale of the preview" },
                    React.createElement(components_1.Icons, { icon: "globe" }))));
        };
        _this.getLinks = function (locales) {
            return locales.map(function (l) { return ({
                id: l,
                title: l,
                value: l,
                active: _this.state.activeLocale === l,
                // next line fixes stupid storybook error passing loading=false to span el
                loading: null,
                onClick: _this.getOnLinkSelected(l)
            }); });
        };
        _this.getOnLinkSelected = function (locale) { return function () {
            _this.setState({
                expanded: false
            });
            _this.changeLocale(locale);
        }; };
        _this.handleVisibilityChange = function (newVisibility) {
            _this.setState({ expanded: newVisibility });
        };
        _this.getDefaultLocale = function (locales) {
            return locales[0];
        };
        _this.onRegister = function (parameters) {
            var defaultLocale = _this.getDefaultLocale(parameters.supportedLocales);
            _this.setState({
                locales: parameters.supportedLocales
            });
            _this.changeLocale(defaultLocale);
        };
        _this.changeLocale = function (locale) {
            var api = _this.props.api;
            _this.setState({
                activeLocale: locale
            });
            api.emit(shared_1.ADDON_ID + "/change", locale);
            api.setQueryParams({ activeLocale: locale });
        };
        return _this;
    }
    LocaleSelector.prototype.componentDidMount = function () {
        var api = this.props.api;
        api.on(shared_1.ADDON_ID + "/register", this.onRegister);
    };
    LocaleSelector.prototype.componentWillUnmount = function () {
        var api = this.props.api;
        api.off(shared_1.ADDON_ID + "/register", this.onRegister);
    };
    LocaleSelector.prototype.render = function () {
        return this.renderLocaleSelector();
    };
    return LocaleSelector;
}(React.Component));
exports.default = LocaleSelector;
