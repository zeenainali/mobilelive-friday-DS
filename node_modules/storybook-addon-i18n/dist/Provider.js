"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var api = __importStar(require("@storybook/client-api"));
var React = __importStar(require("react"));
var shared_1 = require("./shared");
var Provider = /** @class */ (function (_super) {
    __extends(Provider, _super);
    function Provider(props) {
        var _this = _super.call(this, props) || this;
        _this.getDirection = function (locale) {
            return shared_1.RTL_LOCALES.includes(locale.toLowerCase()) ? "rtl" : "ltr";
        };
        _this.onChanged = function (locale) {
            _this.setState({
                activeLocale: locale
            });
        };
        var _a = api.getQueryParams().activeLocale, activeLocale = _a === void 0 ? props.supportedLocales[0] : _a;
        _this.state = { activeLocale: activeLocale };
        props.channel.on(shared_1.ADDON_ID + "/change", _this.onChanged);
        return _this;
    }
    Provider.prototype.componentWillUnmount = function () {
        var channel = this.props.channel;
        channel.removeListener(shared_1.ADDON_ID + "/change", this.onChanged);
    };
    Provider.prototype.render = function () {
        var _a;
        var _b = this.props, ProviderComponent = _b.provider, providerProps = _b.providerProps, _c = _b.providerLocaleKey, providerLocaleKey = _c === void 0 ? "locale" : _c, _d = _b.providerDirectionKey, providerDirectionKey = _d === void 0 ? "direction" : _d, getDirection = _b.getDirection, children = _b.children;
        var activeLocale = this.state.activeLocale;
        var direction = getDirection
            ? getDirection(activeLocale)
            : this.getDirection(activeLocale);
        if (!activeLocale) {
            return false;
        }
        var props = __assign({}, providerProps, (_a = {}, _a[providerLocaleKey] = activeLocale, _a[providerDirectionKey] = direction, _a));
        return (React.createElement("div", { dir: direction },
            React.createElement(ProviderComponent, __assign({}, props), children)));
    };
    return Provider;
}(React.Component));
exports.default = Provider;
