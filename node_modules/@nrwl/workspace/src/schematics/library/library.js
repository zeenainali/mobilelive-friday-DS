"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const workspace_1 = require("@nrwl/workspace");
const workspace_2 = require("@nrwl/workspace");
const workspace_3 = require("@nrwl/workspace");
const workspace_4 = require("@nrwl/workspace");
const workspace_5 = require("@nrwl/workspace");
const lint_1 = require("../../utils/lint");
const ast_utils_1 = require("../../utils/ast-utils");
function addProject(options) {
    return workspace_1.updateWorkspaceInTree((json) => {
        const architect = {};
        architect.lint = lint_1.generateProjectLint(core_1.normalize(options.projectRoot), core_1.join(core_1.normalize(options.projectRoot), 'tsconfig.lib.json'), options.linter);
        json.projects[options.name] = {
            root: options.projectRoot,
            sourceRoot: core_1.join(core_1.normalize(options.projectRoot), 'src'),
            projectType: 'library',
            schematics: {},
            architect,
        };
        return json;
    });
}
function updateTsConfig(options) {
    return schematics_1.chain([
        (host, context) => {
            const nxJson = workspace_2.readJsonInTree(host, 'nx.json');
            return workspace_2.updateJsonInTree('tsconfig.json', (json) => {
                const c = json.compilerOptions;
                c.paths = c.paths || {};
                delete c.paths[options.name];
                c.paths[`@${nxJson.npmScope}/${options.projectDirectory}`] = [
                    `${ast_utils_1.libsDir(host)}/${options.projectDirectory}/src/index.ts`,
                ];
                return json;
            })(host, context);
        },
    ]);
}
function createFiles(options) {
    return schematics_1.mergeWith(schematics_1.apply(schematics_1.url(`./files/lib`), [
        schematics_1.template(Object.assign(Object.assign(Object.assign({}, options), workspace_3.names(options.name)), { tmpl: '', offsetFromRoot: workspace_5.offsetFromRoot(options.projectRoot), hasUnitTestRunner: options.unitTestRunner !== 'none' })),
        schematics_1.move(options.projectRoot),
    ]));
}
function updateNxJson(options) {
    return ast_utils_1.addProjectToNxJsonInTree(options.name, { tags: options.parsedTags });
}
function default_1(schema) {
    return (host, context) => {
        const options = normalizeOptions(host, schema);
        return schematics_1.chain([
            lint_1.addLintFiles(options.projectRoot, options.linter),
            createFiles(options),
            !options.skipTsConfig ? updateTsConfig(options) : schematics_1.noop(),
            addProject(options),
            updateNxJson(options),
            options.unitTestRunner !== 'none'
                ? schematics_1.externalSchematic('@nrwl/jest', 'jest-project', {
                    project: options.name,
                    setupFile: 'none',
                    supportTsx: true,
                    skipSerializers: true,
                    testEnvironment: options.testEnvironment,
                })
                : schematics_1.noop(),
            workspace_4.formatFiles(options),
        ])(host, context);
    };
}
exports.default = default_1;
function normalizeOptions(host, options) {
    const name = workspace_3.toFileName(options.name);
    const projectDirectory = options.directory
        ? `${workspace_3.toFileName(options.directory)}/${name}`
        : name;
    const projectName = projectDirectory.replace(new RegExp('/', 'g'), '-');
    const fileName = options.simpleModuleName ? name : projectName;
    // const projectRoot = `libs/${projectDirectory}`;
    const projectRoot = `${ast_utils_1.libsDir(host)}/${projectDirectory}`;
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    return Object.assign(Object.assign({}, options), { fileName, name: projectName, projectRoot,
        projectDirectory,
        parsedTags });
}
//# sourceMappingURL=library.js.map