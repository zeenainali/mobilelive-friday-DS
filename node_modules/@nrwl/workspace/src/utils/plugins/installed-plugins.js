"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const fs_1 = require("fs");
const path = require("path");
const output_1 = require("../output");
const plugin_capabilities_1 = require("./plugin-capabilities");
const shared_1 = require("./shared");
function getPackagesFromNodeModules(workspaceRoot, requery = false) {
    let packageList = [];
    if (!requery && packageList.length > 0) {
        return packageList;
    }
    const nodeModulesDir = path.join(workspaceRoot, 'node_modules');
    fs_1.readdirSync(nodeModulesDir).forEach((npmPackageOrScope) => {
        if (npmPackageOrScope.startsWith('@')) {
            fs_1.readdirSync(path.join(nodeModulesDir, npmPackageOrScope)).forEach((p) => {
                packageList.push(`${npmPackageOrScope}/${p}`);
            });
        }
        else {
            packageList.push(npmPackageOrScope);
        }
    });
    return packageList;
}
function getInstalledPluginsFromNodeModules(workspaceRoot, corePlugins, communityPlugins) {
    const corePluginNames = corePlugins.map((p) => p.name);
    const communityPluginNames = communityPlugins.map((p) => p.name);
    const packages = getPackagesFromNodeModules(workspaceRoot);
    return packages
        .filter((name) => corePluginNames.indexOf(name) > -1 ||
        communityPluginNames.indexOf(name) > -1)
        .map((name) => plugin_capabilities_1.getPluginCapabilities(workspaceRoot, name))
        .filter((x) => x && !!(x.schematics || x.builders));
}
exports.getInstalledPluginsFromNodeModules = getInstalledPluginsFromNodeModules;
function listInstalledPlugins(installedPlugins) {
    output_1.output.log({
        title: `Installed plugins:`,
        bodyLines: installedPlugins.map((p) => {
            const capabilities = [];
            if (shared_1.hasElements(p.builders)) {
                capabilities.push('builders');
            }
            if (shared_1.hasElements(p.schematics)) {
                capabilities.push('schematics');
            }
            return `${core_1.terminal.bold(p.name)} (${capabilities.join()})`;
        }),
    });
}
exports.listInstalledPlugins = listInstalledPlugins;
//# sourceMappingURL=installed-plugins.js.map