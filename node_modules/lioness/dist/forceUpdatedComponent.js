'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = forceUpdatedComponent;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _recompose = require('recompose');

var _pubsub = require('./pubsub.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Returns a HOC that triggers a re-render of itself whenever
 * a subscription notification is received.
 */
function forceUpdatedComponent(InputComponent) {
  var SubscribeUpdater = function (_PureComponent) {
    _inherits(SubscribeUpdater, _PureComponent);

    function SubscribeUpdater() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, SubscribeUpdater);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SubscribeUpdater.__proto__ || Object.getPrototypeOf(SubscribeUpdater)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        lastNotification: null
      }, _this.handleNotification = function () {
        _this.setState({
          lastNotification: Date.now()
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SubscribeUpdater, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        (0, _pubsub.subscribe)(this.handleNotification);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        (0, _pubsub.unsubscribe)(this.handleNotification);
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(InputComponent, this.props);
      }
    }]);

    return SubscribeUpdater;
  }(_react.PureComponent);

  SubscribeUpdater.displayName = (0, _recompose.wrapDisplayName)(InputComponent, 'forceUpdatedComponent');
  return SubscribeUpdater;
}